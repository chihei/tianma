/**
 * Default config for Alibaba-B2B-ICBU-F2E develop environment.
 * Auto-generated by Tianma v0.7.0
 */

var fs = require('fs'),
	tianma = require('tianma'),
	pipe = tianma.pipe,
	root = config.root;

var unicPipeArr = [
	pipe('tianma-unicorn@1.0.15', { source: 'loop://localhost/' }),
	(function (proxy) {
		return function (context, next) {
			if (context.request.protocol === 'https:') {
				proxy(context, next);
			} else {
				next();
			}
		};
	}(pipe.proxy({
		'loop://localhost/$1': /\/\/.*?\/([sw]img\/.*)/,
		'http://img.alibaba.com@42.156.172.43/$1': /\/\/.*?\/(img\/(?:portrait|company)\/.*)/
	}))),
	function (context, next) {
		var request = context.request,
			response = context.response,
			pathname = request.pathname.substr(1),
			fullpath = config.root + pathname;

		if (response.head('etag')) {
			response.head('etag', fs.statSync(fullpath).mtime.getTime() + '_0');
		}

		next();
	}
];

tianma
	.createHost({ port: config.port || 80, portssl: config.portssl || 443 })
		.mount('*.aliunicorn.com', unicPipeArr)
		.mount('unicorn.vip.dsl.en.alidc.net', unicPipeArr)
		.mount('unicorn.vip.scl.en.alidc.net', unicPipeArr)
		.mount('/version', [
			pipeUnicVersion
		])
		.mount('/', [
			pipe.static({ root: config.root || './htdocs' }),
			pipe.proxy({
				'http://style.alibaba.com@42.156.172.43/$1': /\/\/.*?\/(.*)/
			}),
			pipe.debug(),
			pipe('tianma-mark'),
			config.enableAjaxMock ? pipe('tianma-ajax-mock') : function(c,n){n();},
			function (context, next) {
				var response = context.response,
					mime = [
						'application/vnd.ms-fontobject',
						'application/x-font-ttf',
						'font/opentype',
						'application/x-font-woff'
					];

				if (mime.indexOf(response.head('content-type')) !== -1) {
					context.response.head('access-control-allow-origin', '*');
				}

				next();
			}
		])
		.start();


function pipeUnicVersion(context, next) {
	// var items = getItemMap();
	var search = context.request.search,
		filter = getParam('filter', search);

		console.log(context.request.search);

		var itemMap = getItemMap({
			path: filter || '',
			mask: root
		});

	context.response
		.status(200)
		.head({ 'content-type': 'text/plain' })
		.write(JSON.stringify(itemMap));

	next();
}

//// example ////
// var itemMap = getItemMap({
//     path: 'mobile/js/2v',
//     mask: '/Users/liusiemen/Develop/projects/ali/intl-style/htdocs/'
// });

function getItemMap(config) {
	var fullPath = config.mask + config.path;
	var fileList = getFiles(fullPath);
	var itemMap = {};

	for (var i = 0; i < fileList.length; i++) {
		var file = fileList[i];
		var stat = fs.statSync(file);

		var p = file.replace(config.mask, '');
		var s = stat.mtime.getTime() + '.0';

		itemMap[p] = s;//s.substr(s.length - 10);
	}

	return itemMap;
}

function getFiles(dir) {
	var res = [];
	var files = fs.readdirSync(dir);
	for (var i in files) {
		if (!files.hasOwnProperty(i)) continue;
		var name = dir + '/' + files[i];
		if (fs.statSync(name).isDirectory()) {
			res = res.concat(getFiles(name));
		} else {
			if (name.substr(-3) === '.js' || name.substr(-4) === '.css') {
				res.push(name);
			}
		}
	}

	return res;
}

function getParam(key, searchQuery) {
	var params = parseParam(searchQuery);

	return params[key];
}

function parseParam(searchQuery) {
	searchQuery = searchQuery.substr(1);

	var list = searchQuery.split('&'),
		res = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i].split('=');
		res[item[0]] = item[1] || null;
	}

	return res;
}